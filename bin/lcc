#!/usr/bin/env node

let command = require('commander'),
    db = require('../dist/db').db,
    Lcc = require('../dist/db/models/Lcc').Lcc,
    Item = require('../dist/db/models/Item').Item,
    request = require('request-promise-native'),
    ObjectId = require('mongodb').ObjectId,
    handleError = (err) => {
        console.error(err);
        process.exit(1);
    };

process.on('uncaughtException', handleError);

command.version('1.0.0')
    .option('--lcc <id>', 'The lcc to add or remove.')
    .option('--action <action>', 'What to do with the LCC (add, remove, list or available. default add)', /^(add|addAll|remove|removeAll|list|available)$/i, 'add')
    .parse(process.argv);

const noLccRequredActions = ['list','available','addAll','removeAll'];
if(noLccRequredActions.indexOf(command.action) === -1 && !command.lcc) {
    command.help();
}

function add(id) {
    return new Promise((resolve) => {
        request({
            url: `https://www.sciencebase.gov/catalog/item/${id}`,
            qs: {
                format: 'json',
                fields: 'title'
            }
        })
        .then(json => {
            let data = JSON.parse(json),
                lcc = {
                    _id: new ObjectId(data.id),
                    title: data.title,
                };
            Lcc.findOneAndUpdate({ _id: lcc._id},lcc,{upsert: true, new: true},(err,o) => {
                if(err) {
                    handleError(err);
                }
                resolve(o);
            });
        })
        .catch(handleError);
    });
}

function remove(id) {
    return new Promise((resolve) => {
        // using find and then remve (rather than findOneAndRemove) so schema
        // hooks are executed (to clean up Items).
        Lcc.findById(id,(err,lcc) => {
            if(err) {
                handleError(err);
            }
            if(!lcc) {
                console.log(`LCC with id ${id} not found`)
                return resolve(null);
            }
            lcc.remove((err,lcc) => {
                if(err) {
                    handleError(err);
                }
                resolve(lcc);
            });
        });
    });
}

function getAllIds() {
    return new Promise((resolve,reject) => {
        request({
            url: 'https://lccnetwork.org/api/v1/lcc?$select=title,sbid',
            qs: {
                $select: 'title,sbid',
            }
        })
        .then(response => resolve(JSON.parse(response).list))
        .catch(reject);
    });
}

function awaitLccPromises(promises,logMsg) {
    Promise.all(promises)
        .then((results) => {
            results.filter(lcc => !!lcc)
                .forEach(lcc => console.log(`${logMsg} [${lcc._id}] "${lcc.title}"`));
            // on remove pause before exiting so that the remove triggers for Lcc
            // have time to cleanup associated Items or some may linger
            setTimeout(() => process.exit(0),logMsg === 'removed' && promises.length ? 5000 : 0);
        }).catch(handleError);
}

db().then(() => {
    let promises,logMsg;
    switch(command.action) {
        case 'add':
            logMsg = 'added';
            promises = command.lcc.split(',').map(id => add(id));
            break;
        case 'addAll':
            getAllIds()
                .then(lccs => awaitLccPromises(lccs.map(lcc => add(lcc.sbid)),'added'))
                .catch(handleError);
            break;
        case 'remove':
            logMsg = 'removed';
            promises = command.lcc.split(',').map(id => remove(id));
            break;
        case 'removeAll':
            Lcc.find({})
                .then(lccs => awaitLccPromises(lccs.map(lcc => remove(lcc._id)),'removed'))
                .catch(handleError);
            break;
        case 'list':
            Lcc.find({})
                .then(lccs => {
                    lccs.forEach(lcc => console.log(`[${lcc._id}] "${lcc.title}"`+(lcc.lastSync ? ` lastSync:${lcc.lastSync}` : '')));
                    process.exit(0);
                })
                .catch(handleError);
            break;
        case 'available':
            getAllIds()
            .then(list => {
                list.forEach(lcc => console.log(`${lcc.sbid} : ${lcc.title}`));
                process.exit(0);
            })
            .catch(handleError);
            break;
    }
    if(promises) {
        awaitLccPromises(promises,logMsg);
    }
}).catch(handleError);
