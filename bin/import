#!/usr/bin/env node

let command = require('commander'),
    db = require('../db'),
    sync = require('../lib/sync'),
    request = require('request-promise-native'),
    chalk = require('chalk'),
    handleError = (err) => {
        console.error(err);
        process.exit(1);
    },
    chunkSize = 5; // five at a time

command.version('0.0.0')
    .option('-r --root <root>','The sciencebase folder id to import items from (LCC id from LC Map).')
    .parse(process.argv);

if(!command.root) {
    command.help();
}

let counts = {
    start: (new Date()).getTime(),
    page: 0,
    total: 0,
    found: 0,
    imported: 0
};

function importOnePage(response) {
    console.log(`-- processing page # ${counts.page++}`);
    response = JSON.parse(response);
    let next = () => {
            if(response.nextlink && response.nextlink.url) {
                request(response.nextlink.url).then(importOnePage).catch(handleError);
            } else {
                let time = ((new Date()).getTime() - counts.start)/1000;
                console.log(chalk.green(`\n\nComplete: total: ${counts.total}, found: ${counts.found}, imports: ${counts.imported} time: ${time} seconds`));
                process.exit(0);
            }
        },
        items = response.items;
        inserts = items.map(i => sync.importSbProject(i)).filter(promise => !!promise);

        counts.total += items.length;
        counts.found += inserts.length;

        if(inserts.length) {
            // wait for them to complete
            Promise.all(inserts)
                .then(inserted => {
                    counts.imported += inserted.length;
                    next();
                })
                .catch(handleError);
        } else {
            next();
        }
}

function bootstrap() {
    request({
            url: `https://www.sciencebase.gov/catalog/items`,
            qs: {
                fields: 'title,files',
                filter0: `browseCategory=Project`,
                filter1: 'tags=LCC Network Science Catalog',
                filter2: `ancestors=${command.root}`,
                sort: 'lastUpdated',
                order: 'desc',
                format: 'json',
                max: chunkSize
            }
        })
        .then(importOnePage)
        .catch(handleError);
}
db().then(bootstrap).catch(handleError);
